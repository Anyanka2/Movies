{"version":3,"file":"static/js/983.e15d8ee2.chunk.js","mappings":"4LAEaA,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,GAGd,C,oGCPYC,EAAY,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACxCC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMH,GAAYI,GAAE,kBAAaL,GAAhD,UACE,2BACE,gBACEM,IAAKR,EAAW,UAAMS,EAAAA,IAAN,OAAgBT,GAAhB,UAAmCS,EAAAA,IACnDC,IAAKT,KAEP,0BACE,uBAAIA,UAKb,EChBYU,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC3B,OACE,wBACGA,EAAOC,KAAI,gBAAGX,EAAH,EAAGA,GAAIF,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAApB,OACV,SAACF,EAAD,CAEEC,YAAaA,EACbC,MAAOA,EACPC,GAAIA,GAHCA,EAFG,KAUjB,C,2HCwBD,UAnCiB,WACf,OAA4BY,EAAAA,EAAAA,UAAS,IAArC,eAAOF,EAAP,KAAeG,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,sGAEpBJ,GAAa,GAFO,UAIMK,EAAAA,EAAAA,MAJN,gBAIZC,EAJY,EAIZA,QAERR,EAAUQ,GACVN,GAAa,GAPO,kDASpBE,EAAS,KAAMK,SACfC,EAAAA,GAAAA,MAAY,KAAMD,SAVE,yBAYpBP,GAAa,GAZO,6EAAH,qDAgBrBI,GACD,GAAE,KAGD,iCACE,wBAAI,mBACHH,IAAS,yBAAG,iCAA+BA,KAC3CN,EAAOc,OAAS,IAAK,SAAC,IAAD,CAAYd,OAAQA,IACzCI,IAAa,SAAC,IAAD,MAGnB,C,uNCrCKW,EAAW,+BACXC,EAAS,UAAMD,EAAN,uBACTE,EAAU,UAAMF,EAAN,iBACHlB,EAAO,kCAIdqB,EAAS,CACbA,OAAQ,CACNC,QAJY,mCAKZC,SAAU,UAIDV,EAAmB,mCAAG,sGACVW,EAAAA,EAAAA,IAAA,UAAaL,GAAaE,GADhB,uBACzBI,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,qDAKnBC,EAAgB,mCAAG,WAAMC,GAAN,yFACPH,EAAAA,EAAAA,IAAA,UAAaJ,EAAb,kBAAiCO,GAAaN,GADvC,uBACtBI,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,sDAKhBG,EAAiB,mCAAG,WAAMC,GAAN,yFACRL,EAAAA,EAAAA,IAAA,UAAaN,EAAb,kBAA+BW,GAAYR,GADnC,uBACvBI,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBK,EAAc,mCAAG,WAAMD,GAAN,yFACLL,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAW,EADA,YAErBR,GAH0B,uBACpBI,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAOdM,EAAiB,mCAAG,WAAMF,GAAN,yFACRL,EAAAA,EAAAA,IAAA,UAClBN,EADkB,kBACAW,EADA,YAErBR,GAH6B,uBACvBI,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,sDAO9BO,QAAQC,IAAIF,I","sources":["components/Loader/Loader.jsx","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","pages/HomePage.jsx","services/TMDB.API.js"],"sourcesContent":["import { RotatingLines } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <RotatingLines\n      strokeColor=\"grey\"\n      strokeWidth=\"5\"\n      animationDuration=\"0.75\"\n      width=\"96\"\n      visible={true}\n    />\n  );\n};\n\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { IMG_URL } from 'services/TMDB.API';\n\nexport const MovieCard = ({ poster_path, title, id }) => {\n  const location = useLocation();\n  return (\n    <Link state={{ from: location }} to={`/movies/${id}`}>\n      <li>\n        <img\n          src={poster_path ? `${IMG_URL}${poster_path}` : `${IMG_URL}`}\n          alt={title}\n        />\n        <div>\n          <p>{title}</p>\n        </div>\n      </li>\n    </Link>\n  );\n};\nMovieCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string,\n  poster_path: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from 'components/MovieCard/MovieCard';\n\nexport const MoviesList = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map(({ id, poster_path, title }) => (\n        <MovieCard\n          key={id}\n          poster_path={poster_path}\n          title={title}\n          id={id}\n        ></MovieCard>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      poster_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { fetchTrendingMovies } from '../services/TMDB.API';\nimport { toast } from 'react-toastify';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMoviesData = async () => {\n      try {\n        setIsLoading(true);\n\n        const { results } = await fetchTrendingMovies();\n\n        setMovies(results);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error.message);\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMoviesData();\n  }, []);\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      {error && <p>Whoops, something went wrong: {error}</p>}\n      {movies.length > 0 && <MoviesList movies={movies} />}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TREND_URL = `${BASE_URL}/trending/movie/day`;\nconst SEARCH_URL = `${BASE_URL}/search/movie`;\nexport const IMG_URL = `https://image.tmdb.org/t/p/w500`;\n\nconst API_KEY = '38ec0872f8907a52000e0e854bdd72ed';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`${TREND_URL}`, params);\n  return data;\n};\n\nexport const fetchSearchQuery = async movieName => {\n  const { data } = await axios.get(`${SEARCH_URL}?query=${movieName}`, params);\n  return data;\n};\n\nexport const fetchMovieDetails = async movie_id => {\n  const { data } = await axios.get(`${BASE_URL}/movie/${movie_id}`, params);\n  return data;\n};\n\nexport const fetchMovieCast = async movie_id => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movie_id}/credits`,\n    params\n  );\n  return data;\n};\nexport const fetchMovieReviews = async movie_id => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movie_id}/reviews`,\n    params\n  );\n  return data;\n};\nconsole.log(fetchMovieReviews());"],"names":["Loader","strokeColor","strokeWidth","animationDuration","width","visible","MovieCard","poster_path","title","id","location","useLocation","state","from","to","src","IMG_URL","alt","MoviesList","movies","map","useState","setMovies","isLoading","setIsLoading","error","setError","useEffect","fetchMoviesData","fetchTrendingMovies","results","message","toast","length","BASE_URL","TREND_URL","SEARCH_URL","params","api_key","language","axios","data","fetchSearchQuery","movieName","fetchMovieDetails","movie_id","fetchMovieCast","fetchMovieReviews","console","log"],"sourceRoot":""}