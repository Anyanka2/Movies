{"version":3,"file":"static/js/602.075cc96c.chunk.js","mappings":"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","sources":["pages/MovieDetailsPage.jsx","services/TMDB.API.js"],"sourcesContent":["import React, { lazy, Suspense, useEffect, useRef, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  Link,\n  NavLink,\n  Route,\n  Routes,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\nimport { fetchMovieDetails, IMG_URL } from 'services/TMDB.API';\nimport { Button } from './Pages.styled';\n\nconst CastPage = lazy(() => import('components/Cast/Cast'));\nconst ReviewsPage = lazy(() => import('components/Reviews/Reviews'));\n\nconst MovieDetails = () => {\n  const [movieDet, setMovieDet] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMovieDetailsData = async () => {\n      try {\n        setIsLoading(true);\n\n        const getMovieDetails = await fetchMovieDetails(movieId);\n\n        setMovieDet(getMovieDetails);\n      } catch (error) {\n        setError(error.message);\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieDetailsData();\n  }, [movieId]);\n\n  const { title, release_date, poster_path, vote_average, overview, genres } =\n    movieDet ?? {};\n\n  const releaseYear = release_date ? release_date.split('-')[0] : '';\n\n  return (\n    <>\n      {error && <p>Whoops, something went wrong: {error}</p>}\n      {isLoading && <Loader />}\n      {movieDet && (\n        <div>\n          <Link to={backLink.current}>\n            <Button> Go back </Button>\n          </Link>\n          <div>\n            <div>\n              <img\n                src={\n                  poster_path\n                    ? `${IMG_URL}${poster_path}`\n                    : `https://img.freepik.com/premium-vector/funny-angry-grumpy-black-cat-watercolor-vector_878932-39.jpg?size=626&ext=jpg&ga=GA1.1.2050841542.1692818493&semt=ais`\n                }\n                alt={title}\n              />\n              <div>\n                <h1>\n                  {title} ({releaseYear})\n                </h1>\n                <h2>User score: {Math.round(vote_average * 10)}%</h2>\n                <p>\n                  Overview <br /> {overview}\n                </p>\n                <h2>Genres:</h2>\n                <p>{genres.map(genre => genre.name).join(' ')}</p>\n              </div>\n            </div>\n            <h2>Additional information</h2>\n            <div>\n              <NavLink to=\"cast\"><Button>Cast</Button></NavLink>\n              <NavLink to=\"reviews\"><Button>Reviews</Button></NavLink>\n            </div>\n            <div>\n              <Suspense fallback={<Loader />}>\n                <Routes>\n                  <Route path=\"cast\" element={<CastPage />} />\n                  <Route path=\"reviews\" element={<ReviewsPage />} />\n                </Routes>\n              </Suspense>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TREND_URL = `${BASE_URL}/trending/movie/day`;\nconst SEARCH_URL = `${BASE_URL}/search/movie`;\nexport const IMG_URL = `https://image.tmdb.org/t/p/w500`;\n\nconst API_KEY = '38ec0872f8907a52000e0e854bdd72ed';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`${TREND_URL}`, params);\n  return data;\n};\n\nexport const fetchSearchQuery = async movieName => {\n  const { data } = await axios.get(`${SEARCH_URL}?query=${movieName}`, params);\n  return data;\n};\n\nexport const fetchMovieDetails = async movie_id => {\n  const { data } = await axios.get(`${BASE_URL}/movie/${movie_id}`, params);\n  return data;\n};\n\nexport const fetchMovieCast = async movie_id => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movie_id}/credits`,\n    params\n  );\n  return data;\n};\nexport const fetchMovieReviews = async movie_id => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movie_id}/reviews`,\n    params\n  );\n  return data;\n};"],"names":["CastPage","lazy","ReviewsPage","useState","movieDet","setMovieDet","isLoading","setIsLoading","error","setError","movieId","useParams","location","useLocation","backLink","useRef","state","from","useEffect","fetchMovieDetailsData","fetchMovieDetails","getMovieDetails","message","toast","title","release_date","poster_path","vote_average","overview","genres","releaseYear","split","to","current","src","IMG_URL","alt","Math","round","map","genre","name","join","Suspense","fallback","path","element","BASE_URL","TREND_URL","SEARCH_URL","params","api_key","language","fetchTrendingMovies","axios","data","fetchSearchQuery","movieName","movie_id","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}